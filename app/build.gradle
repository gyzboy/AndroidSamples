apply plugin: 'com.android.application'//应用的插件名

android {//android项目的DSL
    compileSdkVersion 24//required，编译sdk版本
    buildToolsVersion "24.0.0"//required，编译工具版本

    defaultConfig {//默认设置，类似于全局变量，所有的flavors都会共享

        multiDexEnabled true

        applicationId "com.gyz.androidsamples"//应用ID，用以代替packageName，与java区分开来
        minSdkVersion 17
        targetSdkVersion 23
        versionCode rootProject.ext.android.versionCode
        versionName "1.0"

    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            jni.srcDirs = ['src/main/java', 'src/main/jni']
        }
    }
    buildTypes {
        debug {
            buildConfigField "long", "launchTime", "0"
        }
        release {
            minifyEnabled true
            useProguard true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            proguardFile file('../proguard.cfg')
        }
    }

    lintOptions {
        abortOnError false
//        xmlReport false
//        htmlReport true
//        lintConfig file("$rootProject/lint.xml") // 配置 lint 检查规则
//        htmlOutput file("$reportsDir/lint/lint-result.html") // 配置 lint 输出文件
//        xmlOutput file("$reportsDir/lint/lint-result.xml") // 配置 lint 输出文件

        textReport true
        textOutput 'stdout'
    }
}

configurations {
    lintChecks
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.jcodecraeer:xrecyclerview:1.2.7'
    compile 'com.android.support:support-annotations:24.2.1'
    compile project(':androidopensamples')
    compile project(':base')

    provided 'org.jetbrains:annotations:13.0'
    lintChecks project(path: ':timber-lint', configuration: 'lintChecks')
}

task copyLintJar(type: Copy) {
    from(configurations.lintChecks) {
        rename { 'lint.jar' }
    }
    into 'build/intermediates/lint/'
}

project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}

task updateIcon << {
    println "Generating Release Icon"
    def scriptDir = "/scripts";
    exec {
        executable "bash"
        args "$rootProject.rootDir$scriptDir/icon_gen.sh", "v1.0", rootProject.rootDir, scriptDir
    }
}
//preBuild.dependsOn updateIcon

buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
    }

    dependencies {
        classpath group: 'com.gyz.androidsamples.gradle.plugin',
                name: 'plugin',//这里的plugin取的就是plugin的项目名
                version: '1.0.0'
    }
}

apply plugin: 'com.gyz.androidsamples.plugin'

myArgs {
    sender = 'gyzboy'
    message = 'Gradle is so simple.'
    nestArgs {
        receiver = 'gyzboy'
        email = 'gyzboy@126.com'
    }

}

//对文件进行checkstyle检查 默认输出路径为${project}/app/build/reports/checkstyle/checkstyle.html
apply plugin: 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile rootProject.file('checkstyle.xml')
    source 'src/main/java'
    ignoreFailures true// 忽略检查失败的情况，避免gradle命令执行中止
    showViolations true
    include '**/*.java'
    exclude '**/gen/**' // 排除生成的代码

    classpath = files()
}

//对项目进行findbugs检查
apply plugin: 'findbugs'

task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    classes = files("${project.rootDir}/app/build/intermediates/classes")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$reportsDir/findbugs/findbugs.xml"
        }
        html {
            destination "$reportsDir/findbugs/findbugs.html"
        }
    }
    classpath = files()
    ignoreFailures true  // 避免检查失败 gradle 执行中止
}
