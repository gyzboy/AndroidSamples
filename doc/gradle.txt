Gradle compile:
 如果你的jar包/依赖代码 在编译的时候需要依赖，在运行的时候也需要，那么就用compil
Gradle providedCompile：
如果你的jar包/依赖代码 仅在编译的时候需要，但是在运行时不需要依赖,就用providedCompile

gradle 合并android资源的顺序  依赖项->主资源->构建体->构建类型

默认的android构建缓存文件存储位置:<user-home>/.android/build-cache/

对于build.gradle配置文件，当运行Gradle <Task> 时，Gradle会为我们创建一个Project的对象，来映射build.gradle中的内容
其中呢，对于不属于任何Task范畴的代码，Gradle会创建一个Script类的对象，来执行这些代码；对于Task的定义，Gradle会创建Task对象，并将它会作为project的属性存在(实际上是通过getTaskName完成的)
Project的名字是当前build.gradle所在目录的名字

在gradle中，project和build.gradle文件是一一对应的，通过这个文件可以配置project的各种属性。project的初始化流程如下：
（1）首先创建一个Settings的实例。(对应 org.gradle.api.initialization 下的 Interface Settings )
（2）如果当前目录有settings.gradle,那么用这个文件来配置Settings实例。
（3）用Settings实例来创建Project的层次关系。
（4）最后，如果项目中存在build.gradle就通过它来执行每个Project。
项目中，项目分别依次横向执行，因此子项目一定在父项目之后执行。这个规则可以通过调用evaluationdependsonchildren()或加入一个明确的依赖usingevaluationdependson（String）改变

task nTask4 {
    println "this is config"//配置这个task
}
nTask4 << {
    println "nTask4 -- add action by <<" //通过 <<来增加action
}
nTask4.leftShift {
    println "nTask4 -- add action by leftShift "//通过leftShift方法来增加action，等同 <<
}
nTask4.doFirst {
    println "nTask4 -- doFirst" //在action队列的最前面插入一个Action
}

nTask4.doLast {
    println "nTask4 -- doLast" //在action队列的最最后插入一个Action
}

输出结果为：

# gradle nTask4
this is config
:nTask4
nTask4 -- doFirst
nTask4 -- add action by <<
nTask4 -- add action by leftShift
nTask4 -- doLast
BUILD SUCCESSFUL

##########
System Properties:
在运行java程序时，可以使用-D来设置Java的系统变量,gradle xxx -DmySystemProp=xxxx

而在build.gradle中，可以这样使用这个变量：
task printSysProps << {
  println System.properties['system']
}

gradle xxx -Dsystem='xxxxx'

##########
Project Properties:
Project Properties是Gradle专门为Project定义的属性。它的最大优点在于当运行gradle的时候，我们可以使用-P来设置它的值。比如，

gradle xxx -PmyProjectProp=xxxxx

而在build.gradle中，可以这样使用这个变量：
task printProps << {
    if (project.hasProperty('commandLineProjectProp')) {
        println commandLineProjectProp
    }
}

gradle xxx -PcommandLineProjectProp='xxxxxxx'

##########
Ext Properties:
我们还可以为Project或者Task定义Ext属性，也称动态属性，我们必须使用关键字ext(对应ExtraPropertiesExtension的实例)去定义动态属性。

对于Project和Task而言，动态属性定义的方式完全一样，只是作用域不一样。
当定义完成后，我们就可以使用project.prop 或者 task.prop来访问这些动态属性了

ext.projectProperties="ext projectProperties-value"
task printExtProps << {
  ext.taskProperties="ext.task.properties-value"
  if (project.hasProperty('projectProperties')){
    println "ext.projectProperties values is " + projectProperties
  }
  if (printExtProps.hasProperty('taskProperties')){
    println "task has defined ext.taskProperties value is " + taskProperties
  }
}


一个例子:
apply plugin: DateAndTimePlugin

dateAndTime {
   timeFormat = 'HH:mm:ss.SSS'
   dateFormat = 'MM/dd/yyyy'
}

class DateAndTimePlugin implements Plugin<Project> {
   void apply(Project project) {
       project.extensions.create("dateAndTime", DateAndTimePluginExtension)
       project.task('showTime') << {
           println "Current time is " + new Date().format(project.dateAndTime.timeFormat)
       }
       project.tasks.create('showDate') << {
           println "Current date is " + new Date().format(project.dateAndTime.dateFormat)
       }
   }
}

class DateAndTimePluginExtension {
   String timeFormat = "MM/dd/yyyyHH:mm:ss.SSS"
   String dateFormat = "yyyy-MM-dd"
}


//当task添加到taskCollection中时调用
tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
}

##########
gradle命令:
gradle -m build 试运行,可以查看哪些task会被执行
gradle build --profile 查看build运行时间的报告,存储在build/report/profile目录
gradle dependencyInsight --dependency junit查看项目中有没有引入junit,哪些阶段引入的
gradle -q dependencies  --configuration testCompile 只查看testCompile的依赖
gradle dependencies  查看依赖
gradle tasks --all 显示所有可被使用的task以及之间的依赖关系
grdale build -x test 跳过所有test任务
gradle --profile --recompile-scripts --offline --rerun-tasks assembleXXXDebug 强制 Gradle 重新运行所有任务并忽略任何任务优化
Gradle 会尝试通过不重复执行输入未发生变化的任务来节省时间（这些任务在报告的 Task Execution 标签中标记为 UP-TO-DATE，如图 3 中所示），您可以确定哪些任务在不必要的时间执行了工作。例如，如果 :app:processDevUniversalDebugManifest 未标记为 UP-TO-DATE，
则可能说明您的构建配置会随着每个构建动态更新 manifest。不过，有些任务（例如 :app:checkDevDebugManifest）需要在每个构建期间始终运行。

gradle cleanBuildCache 清除构建缓存



编译过程分为三个阶段：

初始化阶段：创建 Project 对象，如果有多个build.gradle，也会创建多个project.
配置阶段：在这个阶段，会执行所有的编译脚本，同时还会创建project的所有的task，为后一个阶段做准备。
执行阶段：在这个阶段，gradle 会根据传入的参数决定如何执行这些task,真正action的执行代码就在这里.

##########
一个项目有一个setting.gradle、包括一个顶层的 build.gradle文件、每个Module 都有自己的一个build.gradle文件。

setting.gradle:这个 setting 文件定义了哪些module 应该被加入到编译过程，对于单个module 的项目可以不用需要这个文件，但是对于 multimodule 的项目我们就需要这个文件，否则gradle 不知道要加载哪些项目。这个文件的代码在初始化阶段就会被执行。
顶层的build.gradle:顶层的build.gradle文件的配置最终会被应用到所有项目中。
它典型的配置如下：
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

allprojects{
    repositories{
        jcenter()
    }
}
buildscript：定义了 Android 编译工具的类路径。repositories中,jCenter是一个著名的 Maven 仓库。
allprojects:中定义的属性会被应用到所有 moudle 中，但是为了保证每个项目的独立性，我们一般不会在这里面操作太多共有的东西。

##########
有四个基本的 task, Android 继承他们分别进行了自己的实现：

assemble：对所有的 buildType 生成 apk 包。
clean:移除所有的编译输出文件，比如apk
check:执行lint检测编译。
build:同时执行assemble和check命令

比如 默认的 assmeble 会依赖 assembleDebug 和assembleRelease，如果直接执行assmeble，最后会编译debug，和release 的所有版本出来。
如果我们只需要编译debug 版本，我们可以运行assembleDebug

//exclude项目
configurations {
    all*.exclude group: 'org.jboss.logging'
}
compile ('org.hibernate:hibernate-core:4.3.6.Final') {
      exclude module: 'dom4j'
      exclude group: 'org.jboss.logging'
   }

Transitive用于自动处理子依赖项。默认为true
//统一指定
configurations.all {
   transitive = false
}
//强制指定某个版本
configurations.all {
   resolutionStrategy {
       force 'org.hamcrest:hamcrest-core:1.3'
   }
}
//exclude项目
configurations {
   all*.exclude group: 'org.hamcrest', module: 'hamcrest-core'
}