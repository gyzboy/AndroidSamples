1、apk的启动流程:
一. Launcher通过Binder进程间通信机制通知ActivityManagerService，它要启动一个Activity；
二. ActivityManagerService通过Binder进程间通信机制通知Launcher进入Paused状态；
三. Launcher通过Binder进程间通信机制通知ActivityManagerService，它已经准备就绪进入Paused状态，
    于是ActivityManagerService就创建一个新的进程，这个进程就是相应的应用进程。
    ActivityManagerService 通过 Socket 通信的方式和 Zygote 进行协商，Zygote 在其监听的 /dev/socket/zygote socket 中发现有需要创建进程的请求后，
    会 fork 自身，并返回相应的 Process Id用来启动一个ActivityThread实例，即将要启动的Activity就是在这个ActivityThread实例中运行；
四. ActivityThread通过Binder进程间通信机制将一个ApplicationThread类型的Binder对象传递给ActivityManagerService，
    以便以后ActivityManagerService能够通过这个Binder对象和它进行通信；
五. ActivityManagerService通过Binder进程间通信机制通知ActivityThread，上面创建的Process 会进行相应的初始化，使得其具备与系统服务进行 IPC 通信的能力,
在此之后，调用 ActivityThread 中的 main 方法，开启 Looper，主线程启动。

2.LruCache原理:
LruCache使用一个LinkedHashMap简单的实现内存的缓存，没有软引用，都是强引用。如果添加的数据大于设置的最大值，就删除最先缓存的数据来调整内存。
他的主要原理在trimToSize方法中。需要了解两个主要的变量size和maxSize
maxSize是通过构造方法初始化的值，他表示这个缓存能缓存的最大值是多少。size在添加和移除缓存都被更新值，他通过safeSizeOf这个方法更新值。
safeSizeOf默认返回1，但一般我们会根据maxSize重写这个方法，比如认为maxSize代表是KB的话，那么就以KB为单位返回该项所占的内存大小。
除异常外首先会判断size是否超过maxSize,，如果超过了就取出最先插入的缓存，如果不为空就删掉（一般来说只要map不为空都不会返回null，因为他是个双休链表），并把size减去该项所占的大小。这个操作将一直循环下去，直到size比maxSize小或者缓存为空。

3.Webview相关
一、WebView缓存:
1）浏览器缓存机制；
2）Dom Storage（Web Storage）存储机制；
3）Web SQL Database 数据库缓存机制；
   String databaseDirPath = context.getDir("database",0).getPath();
   mWebView.getSettings().setDatabasePath(databaseDirPath);
4）Application Cache（AppCache）机制；
   String cacheDirPath = context.getDir("app_cache",0).getPath();
   mWebView.getSettings().setAppCachePath(cacheDirPath);
5）Indexed Database （IndexedDB）；
6）File System API；

二、WebView内存泄露:
1) 创建新进程承载webview,使用完后清除进程避免内存泄露
2) 使用自己封装的WebView:
   WebView webview = new WebView(context, attrs);
   ViewGroup.LayoutParams lp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
   webview.setLayoutParams(lp);
   swipeContainer.addView(webview);


三、Android Studio调试
1、异常断点:右键断点,勾选Java Exception Breakpoints，也可以在左上角选择Java Exception Breakpoints这样在发生
java异常时就会断点在发生异常的位置
2、条件断点:在断点处右键输入condition就可以当满足条件时自动挂起
3、日志断点:右键断点处,去掉suspend挂起状态,勾选上log的选项,在输入框里输入log内容,会输出到console目录
4、域断点:在对应域上加上断点即可,当这个域被修改时自动回调到修改处

四、android命令
dumpsys可以查看系统服务和状态，非常强大，可通过如下查看所有支持的子命令
adb shell dumpsys | grep "DUMP OF SERVICE" 列出dumpsys所支持的所有命令

adb install -r APK_FILE 重新安装并保留所有数据
adb shell am start PACKAGE_NAME/ACTIVITY_IN_PACKAGE 启动activity

adb shell input keyevent 82 解锁屏幕

adb logcat -s TAG_NAME_1 TAG_NAME_2 按签名过滤日志
adb logcat "*:W" 按日志等级过滤日志
adb logcat -s TEST: W 按签名和优先级同时过滤日志
adb logcat | grep "Exception\|Error"
adb logcat -c 清除缓存区并清除旧的日志

adb push /user/XXX sdcard/xx 电脑文件push到手机

adb bugreport > bugreport.txt  <= 6.0
adb bugreport bugreport.zip  >7.0
然后使用google的battery-historian 或者sony的ChkBugReport进行bug分析

adb shell --> sqlite3访问数据库
cat /proc/meminfo 查看内存信息
cat /proc/cpuinfo 查看CPU信息


五、Linux命令
which 查看命令路径 对应$PATH中的路径  which adb
find 命令:
find . 列出当前目录以及子目录的所有文件
find /home -name "*.txt" 在home下查找.txt后缀的所有文件  -iname 忽略大小写
find . -name "*.txt" -o -name "*.pdf" 查找所有txt和pdf结尾的文件
find /home ! -name "*.txt" 不是以txt结尾的文件
find . -maxdepth 3 -type f 最大深度为3类型为文件
find . -type f -atime -7 7天内被访问的文件 7天前使用 +7
find . -type f -atime 7 正好在7天前被访问的文件
find . -type f -name "*.txt" -delete 删除后缀名为txt的所有文件
locate /etc/sh 查找目录下所有以sh开头的文件

tail file 显示文件的最后10行
tail -f file 显示文件最新追加的内容
tail +20 file 显示文件从第20行到末尾
tail -c 10 file 显示文件最后10个字符

less -N file 显示文件pageUp、pageDown翻页 Q退出

cat -b file 显示file内容,忽略空白行编号
cat m1 m2 < file 输出m1、m2到file文件中

rm -i file 删除前询问用户
rm -rf file 强制删除file以及子目录下所有文件

mv ex3 new1 将ex3重命名为new1
mv /usr/men/* . 将/usr/men下的所有文件移动到当前目录

grep "xxx" file1 file2 --color=auto 在file1 file2 中输出包含xxx字符串的行并以颜色显示
grep -v "xxx" file 输出除了包含xxx字符串的行
grep -c "xxx" file 输出包含字符串xxx的行数

grep "main()" . -r --include *.{php,html}在所有.php和.html文件中遍历查找包含main字符串的行








