1、apk的启动流程:
一. Launcher通过Binder进程间通信机制通知ActivityManagerService，它要启动一个Activity；
二. ActivityManagerService通过Binder进程间通信机制通知Launcher进入Paused状态；
三. Launcher通过Binder进程间通信机制通知ActivityManagerService，它已经准备就绪进入Paused状态，
    于是ActivityManagerService就创建一个新的进程，这个进程就是相应的应用进程。
    ActivityManagerService 通过 Socket 通信的方式和 Zygote 进行协商，Zygote 在其监听的 /dev/socket/zygote socket 中发现有需要创建进程的请求后，
    会 fork(复制) 自身，并返回相应的 Process Id用来启动一个ActivityThread实例，即将要启动的Activity就是在这个ActivityThread实例中运行；
四. ActivityThread通过Binder进程间通信机制将一个ApplicationThread类型的Binder对象传递给ActivityManagerService，
    以便以后ActivityManagerService能够通过这个Binder对象和它进行通信；
五. ActivityManagerService通过Binder进程间通信机制通知ActivityThread，上面创建的Process 会进行相应的初始化，使得其具备与系统服务进行 IPC 通信的能力,
在此之后，调用 ActivityThread 中的 main 方法，开启 Looper，主线程启动。

2.LruCache原理:
LruCache使用一个LinkedHashMap简单的实现内存的缓存，没有软引用，都是强引用。如果添加的数据大于设置的最大值，就删除最先缓存的数据来调整内存。
他的主要原理在trimToSize方法中。需要了解两个主要的变量size和maxSize
maxSize是通过构造方法初始化的值，他表示这个缓存能缓存的最大值是多少。size在添加和移除缓存都被更新值，他通过safeSizeOf这个方法更新值。
safeSizeOf默认返回1，但一般我们会根据maxSize重写这个方法，比如认为maxSize代表是KB的话，那么就以KB为单位返回该项所占的内存大小。
除异常外首先会判断size是否超过maxSize,，如果超过了就取出最先插入的缓存，如果不为空就删掉（一般来说只要map不为空都不会返回null，因为他是个双休链表），并把size减去该项所占的大小。这个操作将一直循环下去，直到size比maxSize小或者缓存为空。

3.Webview相关
一、WebView缓存:
1）浏览器缓存机制；
2）Dom Storage（Web Storage）存储机制；
3）Web SQL Database 数据库缓存机制；
   String databaseDirPath = context.getDir("database",0).getPath();
   mWebView.getSettings().setDatabasePath(databaseDirPath);
4）Application Cache（AppCache）机制；
   String cacheDirPath = context.getDir("app_cache",0).getPath();
   mWebView.getSettings().setAppCachePath(cacheDirPath);
5）Indexed Database （IndexedDB）；
6）File System API；

二、WebView内存泄露:
1) 创建新进程承载webview,使用完后清除进程避免内存泄露
2) 使用自己封装的WebView:
   WebView webview = new WebView(context, attrs);
   ViewGroup.LayoutParams lp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
   webview.setLayoutParams(lp);
   swipeContainer.addView(webview);


三、Android Studio调试
1、异常断点:右键断点,勾选Java Exception Breakpoints，也可以在左上角选择Java Exception Breakpoints这样在发生
java异常时就会断点在发生异常的位置
2、条件断点:在断点处右键输入condition就可以当满足条件时自动挂起
3、日志断点:右键断点处,去掉suspend挂起状态,勾选上log的选项,在输入框里输入log内容,会输出到console目录
4、域断点:在对应域上加上断点即可,当这个域被修改时自动回调到修改处

四、android命令
dumpsys可以查看系统服务和状态，非常强大，可通过如下查看所有支持的子命令
adb shell dumpsys | grep "DUMP OF SERVICE" 列出dumpsys所支持的所有命令

adb install -r APK_FILE 重新安装并保留所有数据
adb shell am start PACKAGE_NAME/ACTIVITY_IN_PACKAGE 启动activity

adb shell am start -w packagename/activityname 计算app启动时间,返回三个值
ThisTime: 表示一连串启动 Activity 的最后一个 Activity 的启动耗时
WaitTime: 就是总的耗时，包括前一个应用 Activity pause 的时间和新应用启动的时间
TotalTime: 表示新应用启动的耗时，包括新进程的启动和 Activity 的启动，但不包括前
          一个应用 Activity pause 的耗时

adb shell input keyevent 82 解锁屏幕

adb logcat -s TAG_NAME_1 TAG_NAME_2 按签名过滤日志
adb logcat "*:W" 按日志等级过滤日志
adb logcat -s TEST: W 按签名和优先级同时过滤日志
adb logcat | grep "Exception\|Error"
adb logcat -c 清除缓存区并清除旧的日志

adb push /user/XXX sdcard/xx 电脑文件push到手机

adb bugreport > bugreport.txt  <= 6.0
adb bugreport bugreport.zip  >7.0
然后使用google的battery-historian 或者sony的ChkBugReport进行bug分析

adb shell --> sqlite3访问数据库

/proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为内核与进程提供通信的接口。
系统中当前运行的每一个进程在/proc下都对应一个以进程号为目录名的目录/proc/pid，它们是读取进程信息的接口。此外，在Linux 2.6.0-test6以上的版本中/proc/pid目录中有一个task目录，
/proc/pid/task目录中也有一些以该进程所拥有的线程的线程号命名的目录/proc/pid/task/tid，它们是读取线程信息的接口
cat /proc/meminfo 查看内存信息
cat /proc/cpuinfo 查看CPU信息
/proc/" + Pid + "/task/" + ThreadId + "/sched  读取线程信息,关注wait_sum,sum_exec_runtime,wait_max,wait_count,iowait_sum,iowait_count
/proc/" + pid + "/stat 该文件包含了某一进程所有的活动的信息，该文件中的所有值都是从系统启动开始累计到当前时刻。
adb shell -> run as packageName cd data/data/...访问私有文件


五、Linux命令



六、Android中资源文件与资源ID之间的映射工作
在编译的时候，AAPT会扫描你所定义的所有资源（在不同文件中定义的以及单独的资源文件），然后给它们指定不同的资源ID。
资源ID 是一个32bit的数字，格式是PPTTNNNN ， PP代表资源所属的包(package) ,TT代表资源的类型(type)，NNNN代表这个类型下面的资源的名称。
对于系统应用的资源来说,PP的取值是0x01,对于应用程序的资源来说，PP的取值是0×7f。
TT 和NNNN 的取值是由AAPT工具随意指定的–基本上每一种新的资源类型的数字都是从上一个数字累加的（从1开始）；而每一个新的资源条目也是从数字1开始向上累加的。
所以如果我们的这几个资源文件按照下面的顺序排列，AAPT会依次处理：
 <code>layout/main.xml </code>

<code>drawable/icon.xml </code>

<code>layout/listitem.xml</code>
按照顺序，第一个资源的类型是”layout” 所以指定TT==1， 这个类型下面的第一个资源是”main” ，所以指定NNNN==1 ，最后这个资源就是0x7f010001。
第二个资源类型是”drawable”，所以指定TT==2，这个类型下的”icon” 指定NNNN ==1，所以最终的资源ID 是 0x7f020001。
第三个资源类型是”layout”，而这个资源类型在前面已经有定义了，所以TT仍然是1，但是”listitem”这个名字是新出现的，所以指定NNNN==2，因此最终的资源ID 就是 0x7f010002。
注意的是，AAPT在每一次编译的时候不会去保存上一次生成的资源ID标示，每当/res目录发生变化的时候，AAPT可能会去重新给资源指定ID号，然后重新生成一个R.java文件。
因此，在做开发的时候，你不应该在程序中将资源ID持久化保存到文件或者数据库。而资源ID在每一次编译后都有可能变化。
一旦资源被编译成二进制文件的时候，AAPT会生成R.java 文件和“resources.arsc”文件，“R.java”用于代码的编译，而”resources.arsc”则包含了全部的资源名称、资源ID和
资源的内容（对于单独文件类型的资源，这个内容代表的是这个文件在其.apk 文件中的路径信息）。这样就把运行环境中的资源ID 和具体的资源对应起来了。
在调试的时候，你可以使用“ aapt dump resources <apk的路径>”来看到对resources.arsc文件的详细描述信息。

七、NoClassDefFoundError与ClassNotFoundException区别
ClassNotFoundException:
1、class调用forName   2、classLoader调用findSystemClass  3、ClassLoader调用loadClass 多发生在在运行时调用这个类时找不到,在编译期无法
感知错误(使用error-prone可以发现问题)
NoClassDefFoundError:
JVM或者ClassLoader加载一个类(普通方法调用或者实例化一个对象)时发现class未定义,这时源码已经被编译,但是找不到这个类,多发生在类似于
jar的文件中,里面并不是所有所需要的类被加载进去,在编译期就会出错,可能发生于在静态域或者静态代码块初始化期间

八、屏幕密度相关:

      像素密度等级	等级像素密度	逻辑像素密度	屏幕像素	 屏幕尺寸(inch)	宽逻辑尺寸(dp单位)	 真实像素密度
ldpi      0.75	      120	        120	    240*320	   2.7	           w320dp	      140.55
mdpi      1	          160	        160	    320*480	   3.2	           w320dp	      180.27
hdpi      1.5	      240	        240	    480*800	   3.4	           w320dp	      274.39
xhdpi     2	          320	        320	    720*1280   4.65	           w360dp	      315.6
xhdpi     2	          320	        320	    768*1280   4.65	           w384dp	      321
xxhdpi    3	          480	        480	   1080*1920   4.95	           w360dp	      445
xxhdpi    3	          480	        420	   1080*1920   5.2	           w411dp	      423
xxxdpi    4	          640	        560	   1440*2560   5.96	           w411dp	      493
nopdi 文件夹下的图片会按照实际像素显示,不会根据密度进行缩放
drawable 与 mdpi 相同

九、Android的Library中不能使用switch语句
这是由于library的R.java中的资源ID不是常量引起的，我们可以在library中通过if-else-if条件语句来引用资源ID，这样就避免了这个错误

十、Android内存泄漏
手动触发GC后，通过adb shell dumpsys meminfo packagename -d查看Activity和View的数量

对于性能问题，分析和改善有必要遵循以下原则：
1、一切看数据说话，不能跟着感觉走，感觉哪有问题就去改，很有可能会适得其反；
2、性能优化是一个持续的过程，需要不断地改善，不要想着一气呵成；
3、对于性能问题，不一定必须要改善，受限于架构或者其它原因某些问题可能会很难改善，必须要先保证能用，再才考虑好用。
4、改善后一定要验证，任何一个地方的改动都需要验证，避免因为改善性能问题导致其它的问题。

常见的内存泄露问题:
1、定义 Activity 时在内部定义一个静态变量，并将其值设置为处于运行状态的 Activity 。如果在 Activity 生命周期结束时没有清除引用的话，这个 Activity 就会泄漏。
2、静态的View
3、非静态内部类导致的内存泄露，内部类在它的整个生命周期中是会访问外部类。比如Handler，解决方法是将内部类写成静态内部类，在静态内部类中使用软引用/弱引用持有外部类的实例
4、IO操作后，没有关闭文件导致的内存泄露，比如Cursor、FileInputStream、FileOutputStream使用完后没有关闭，这种问题在Android Studio 2.0中能够通过静态代码分析检查出来，直接改善就可以了
5、自定义View中使用TypedArray后，没有recycle，这种问题也可以在Android Studio 2.0中能够通过静态代码分析检查出来，直接改善就可以了
6、同一个APP，将图片放在不同的drawable文件夹下，在相同的设备上占用的内存情况不一样,尽量放在xxhdpi中,适配主流屏幕,如果放在mdpi中的图片，在xxhdpi屏幕的手机上1dp=3px,所以会放大9倍,所占内存扩大了9倍
内存占用计算公式:w * h * 4(ARGB4个通道) 单位byte

十一、ClassLoader总结
PathClassLoader: 主要用于系统和app的类加载器,其中optimizedDirectory为null, 采用默认目录/data/dalvik-cache/
DexClassLoader: 可以从包含classes.dex的jar或者apk中，加载类的类加载器, 可用于执行动态加载,但必须是app私有可写目录来缓存odex文件. 能够加载系统没有安装的apk或者jar文件， 因此很多插件化方案都是采用DexClassLoader;
BaseDexClassLoader: 比较基础的类加载器, PathClassLoader和DexClassLoader都只是在构造函数上对其简单封装而已.
BootClassLoader: 作为父类的类构造器.

十二、Android OOM Killer
proc/pid下有几个值可以查看Android的OOM阈值
proc/pid/oom_adj:
1、前台进程 （Active Process）： oom_adj为0。
前台进程包括 ： 1：活动 正在前台接收用户输入
              2：活动、服务与广播接收器正在执行一个onReceive事件的处理函数
              3： 服务正在运行 onStart、onCreate或onDestroy事件处理函数。

2、已启动服务的进程(Started Service Process) ：oom_adj值为0，这类进程包含一个已启动的服务。 服务并不直接与用户输入交互，因此服务的优先级
低于可见活动的优先级，但是，已启动服务的进程任被认为是前台进程，只有在活动以及可见活动需要资源时，已启动服务的进程才会被杀死。
3、可见进程 （Visible Process）: oom_adj 为 1。活动是可见的，但并不在前台，或者不响应用户的输入。例如，活动被非全屏或者透明的活动所遮挡。
4、后台进程 （Backgroud Process）: oom_adj 值为 2，这类进程不包含任何可见的活动与启动的服务。通常大量后台进程存在时，系统会采用（last-seen-first-kill）后见先杀的方式，释放资源为前台进程使用。
5、主界面 （home process）： oom_adj 为 4
6、隐藏进程 （hidden process）： oom_adj为 7
7、内容提供者 （content provider）：oom_adj 为 14
8、空进程 （Empty process）：oom_adj为 15

oom_score的分数越高就越会被内核优先杀掉

通过cat proc/pid/oom_adj 查看值

十三、过度绘制
颜色标识: 从好到差:蓝-绿-淡红-红
1. 蓝色1x过度绘制
2. 绿色2x过度绘制
3. 淡红色3x过度绘制
4. 红色超过4x过度绘制

1.减少多余的background
2.可复用组建使用include或者style的方式减少大量代码.
3.viewStub的引入减少不长用的布局View的添加
4.减少层级
5.this.getWindow().setBackgroundDrawable(null);的方式去设置背景，这个要谨慎使用，在低端机上的使用可能会造成闪屏的情况

十四、ANTI_ALIAS_FLAG减少绘制边缘锯齿
ANTI_ALIAS_FLAG 通过混合前景色与背景色来产生平滑的边缘,当我们在 Bitmap 上重绘时，像素的颜色会越来越纯粹导致边缘越来越粗糙。
这就是为什么设置了 ANTI_ALIAS_FLAG 后你们图形的边缘还是十分粗糙。

如何避免这个问题:
1、避免重绘
2、在重绘前清空Bitmap

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (bitmap == null) {
            bitmap = Bitmap.createBitmap(200,
                                         200,
                                         Bitmap.Config.ARGB_8888);
            bitmapCanvas = new Canvas(bitmap);
        }
        bitmapCanvas.drawColor(
                  Color.TRANSPARENT,
                  PorterDuff.Mode.CLEAR); //this line moved outside if
        drawOnCanvas(bitmapCanvas);
        canvas.drawBitmap(bitmap, mLeftX, mTopY, p);
    }

十五、不要用Application缓存数据
Application对象并不是始终在内存中的，它有可能会由于系统内存不足而被杀掉。但Android在你恢复这个应用时并不是重新开始启动这个应用，
它会创建一个新的Application对象并且启动上次用户离开时的activity以造成这个app从来没有被kill掉得假象。

十六、gradle脚本中debugCompile project
因为在library项目中默认只会执行compileRelease而不是预想中的compileDebug,这就会导致library项目中的BuildConfig.DEBUG一直返回false,要解决这个问题
可以指定编译参数,
publishNonDefault true //需要加上该参数否则会提示debug not found
debugCompile project(path: ‘:train’, configuration: ‘debug’)

十七、获取前台运行进程
1、通过getRunningTasks获取当前topActivity,通过topActivity的getProcess判断是否是当前进程,此方法在5.0以上失效
2、通过getRunningAppProcesses的IMPORTANCE_FOREGROUND属性判断是否位于前台，当service需要常驻后台时候，此方法失效,分机型
3、通过使用UsageStatsManager获取,5.0以上有用
4、读取/proc目录下/proc/pid/cmdline，再根据进程的属性判断是否为前台

十八、看似View不继承于View的"View"
Toast--->show的时候通过aidl将show事件enqueueToast到notification服务中,makeText的时候动态的new出一个Toast对象,inflate布局
PopupWindow--->附着在window上
Dialog--->附着在window上,默认显示在center位置
ViewRoot--->继承与Handler,主要是把WMS的IPC调用转换为本地的一个异步调用

十九、FrameWork框架
服务端(Android手机):Wms与Ams,一个用于显示,一个用于管理Activity，两个消息处理类:KeyQ(Wms内部类,会启动一个线程,不断读取用户的UI操作信息)
InputDispatcherThread:会启动一个线程,不断的从QueueEvent中取出用户消息,并进行一定的过滤,再分发给当前客户端程序中

客户端(App应用):
ActivityThread:UI线程或者主线程
Activity:APK运行的最小单元
PhoneWindow:继承与Window,是一个内部含有View对象(DecordView),并提供一组通用窗口操作API
Window:一个抽象类,Wms所管理的窗口不是window类,而是一个view或者viewGroup,对于phoneWindow而言就是decordView
DecordView:是FrameLayout的子类
ViewRoot:继承与Handler,将Wms的IPC调用转为本地的一个异步调用
W:继承于Binder,是ViewRoot的一个内部类,是ViewRoot类内部用于Wms的IPC调用

Activity启动后会创建一个ViewRoot.W和ApplicationThread,两者都继承于Binder,再启动一个UI线程ActivityThread

二十、SharePreference关于getXXX方法性能降低的说法
创建相关权限和mode的xml文件，异步同步锁加载xml文件并解析xml数据为map类型到内存中等待使用操作，特别注意，在xml文件异步加载未完成时调运SharePreference的getXXX及setXXX方法是阻塞等待的。
由此也可以知道，一旦拿到SharePreference对象之后的getXXX操作其实都不再是文件读操作了，也就不存在网上扯蛋的认为多次频繁使用getXXX方法降低性能的说法了。

二十一、Toast设置消失duration,Toast队列中最多50个Toast
 private void scheduleTimeoutLocked(ToastRecord r)
    {
        //移除ToastRecord
        mHandler.removeCallbacksAndMessages(r);
        Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);
        //static final int LONG_DELAY = 3500; // 3.5 seconds
        //static final int SHORT_DELAY = 2000; // 2 seconds
        long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;
		//发送Toast消失的message
        mHandler.sendMessageDelayed(m, delay);
    }

二十二、Linux文件属性

-rwx-r----
第一位:文件类型,d为目录,-为文件,l为连接文件,b为可供存储的接口设备,c为串口设备
234位:当前用户权限,r读w写x执行
567位:用户组权限
8910位:其他用户

chgrp users install.log  改变install.log文件所在组为users,users必须在group中已经存在 -R 递归
chown 改变文件所有者
chmod 改变文件权限 r=4 w=2 x=1
chmod -r 777 install.log
chmod a+x install.log 对所有用户增加执行权限 u=user g=group o=other a=all

开放用户目录给任何人浏览时至少需要赋予r+x的权限

默认使用Ext2/Ext3文件系统时,单一文件或者目录文件名最大长度为255个字符,带完整路径的最大长度为4096个字节

less 可以向上下查询信息内容
空格键   翻页
/字符串  向下查询字符串
？字符串  向上查询字符串
n       重复前一个查询
N       反向重复前一个查询
q       离开

查询11-20行的数据   head -n 20 /etc/main.config | tail -n 10

touch 创建文件、修改文件时间

umask 022 需要减掉的权限 0代表不需要减掉任何权限 2代表需要减掉w权限

二十三、Android的沙盒机制
每个app都有自己的UID,每个UID代表自己一个封闭的沙盒环境,想破之使用ShareUID

二十四、Android Studio打包流程
Gradle中有如下一下默认约定的任务:
1. assemble
该任务包含了项目中的所有打包相关的任务，比如java项目中打的jar包，Android项目中打的apk
2. check
该任务包含了项目中所有验证相关的任务，比如运行测试的任务
3. build
该任务包含了assemble和check
4. clean
该任务会清空项目的所有的输出，删除所有在assemble任务中打的包

assemble, check 和 build 任务实际上并不做任何事情，它们其实只是为插件提供了一个钩子，真正的事情都是由插件来完成的。

二十五、Android签名证书
▪ 数字证书都是有有效期的，Android只是在应用程序安装的时候才会检查证书的有效期。程序有效期内被安装后，即使证书过期也不会影响程序的正常功能了。
▪ 如果计划将应用程序发布到Android Market, 为应用签名的key的有效期必须在2033年10月22日以后，Market服务器强制执行这个规则。
▪ debug.keystore在不同的机器上所生成的可能都不一样，即如果不同开发机器上生成的相同App有可能不会覆盖安装。
▪ 大部分应用程序商店（包括谷歌Play商店）不会接受调试证书签名的APK。
▪ 证书中的有效期、证书持有者姓名、组织名称、城市及国家等信息不影响证书是否相同的判定，即只要证书公私钥信息一致，系统就判定证书相同。

META-INF文件夹:
▪ Manifest.MF：该文件可以通过文本编辑工具打开查看，可以看到包含了每一个文件（包括资源文件）的哈希值（BASE64）
▪ CERT.SF: 到跟manifest.mf中的很类似，也是BASE64编码的哈希值，是对MANIFEST.MF的每个条目再次计算摘要后的文件。
▪ CERT.RSA：这个文件就无法用文本编辑工具打开了，内容一般包括：开发者信息+开发者公钥 +CA的签名（ CA对前两部分做hash值然后私钥加密之后的密文）

二十六、RPC 远程过程调用协议
       POJO java简单对象


二十七、SimpleDataFormat
SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为
static，必须加锁，或者使用 DateUtils 工具类。
正例:注意线程安全，使用 DateUtils。亦推荐如下处理:
private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {
    @Override
    protected DateFormat initialValue() {
        return new SimpleDateFormat("yyyy-MM-dd");
} };
说明:如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，
DateTimeFormatter 代替 Simpledateformatter，官方给出的解释:simple beautiful strong immutable thread-safe

二十八、ThreadLocal

1. 建立一个类，并在其中封装一个静态的ThreadLocal变量，使其成为一个共享数据环境。
2. 在类中实现访问静态ThreadLocal变量的静态方法（设值和取值）。

1. ThreadLocalMap变量属于线程（Thread）的内部属性，不同的线程（Thread）拥有完全不同的ThreadLocalMap变量。
2. 线程（Thread）中的ThreadLocalMap变量的值是在ThreadLocal对象进行set或者get操作时创建的。
3. 在创建ThreadLocalMap之前，会首先检查当前线程（Thread）中的ThreadLocalMap变量是否已经存在，如果不存在则创建一个；如果已经存在，则使用当前线程（Thread）已创建的ThreadLocalMap。
4. 使用当前线程（Thread）的ThreadLocalMap的关键在于使用当前的ThreadLocal的实例作为key进行存储。
ThreadLocal模式，至少从两个方面完成了数据访问隔离，有了横向和纵向的两种不同的隔离方式，ThreadLocal模式就能真正地做到线程安全：
纵向隔离 —— 线程（Thread）与线程（Thread）之间的数据访问隔离。这一点由线程（Thread）的数据结构保证。因为每个线程（Thread）在进行对象访问时，访问的都是各自线程自己的ThreadLocalMap。
横向隔离 —— 同一个线程中，不同的ThreadLocal实例操作的对象之间的相互隔离。这一点由ThreadLocalMap在存储时，采用当前ThreadLocal的实例作为key来保证。

1）ThreadLocal是一个Java类，通过对当前线程（Thread）中的局部变量的操作来解决不同线程的变量访问的冲突问题。所以，ThreadLocal提供了线程安全的共享对象机制，每个线程（Thread）都拥有其副本。
2）Java中的synchronized是一个保留字，它依靠JVM的锁机制来实现临界区的函数或者变量在访问中的原子性。在同步机制中，通过对象的锁机制保证同一时间只有一个线程访问变量。此时，被用作“锁机制”的变量是多个线程共享的。
同步机制采用了“以时间换空间”的方式，提供一份变量，让不同的线程排队访问。而ThreadLocal采用了“以空间换时间”的方式，为每一个线程都提供了一份变量的副本，从而实现同时访问而互不影响。

二十九、classLoader与双亲委派
启动类加载器
扩展类加载器
应用类加载器
自定义加载器

如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，
只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。

双亲委派模型是保证了类的安全加载，这里同时依赖了类加载器隔离的原理：不同类加载器加载的类之间是无法直接交互的，即使是同一个类，被不同的ClassLoader加载，它们也无法感知到彼此的存在。
这样即使有恶意的类冒充自己在核心包（例如java.lang）下，由于它无法被启动类加载器加载，也造成不了危害

三十、Handler、Looper
looper在prepare时会把当前Looper放到threadlocal中,保证了每个线程拥有自己的looper
looper在loop的时候会先从threadlocal中获取属于自己thread的looper,如果为null的话就抛出RuntimeException异常
msg.target不断的分发消息,msg.target只是个handler

for (;;) {//死循环，会不会把主线程卡死？？？
不会被卡死。
涉及到Linux下的通讯机制，管道通讯的概念，管道就是内存中的一个特殊的一个文件，这个文件有两个句柄（其实就是java中的引用），
一个是读的引用，一个是写的引用，当写的一端写入内容时，读的一端就会被唤醒，读的一端在没有读到消息时会休眠

总结looper.loop（）做了什么?
其实就是首先通过myLooper()方法获得looper对象引用，然后通过looper对象的引用获得消息队列的引用，然后通过一个死循环不断地从消息队列中获取到消息，通过msg.target获得handler，
然后调用handler对象的disPatchmessage（）方法执行handMessage()【由我们外部重写】，这也就消息就循环执行起来了。。。

Binder的clearCallingIdentity作用是清空远程调用端的uid和pid，用当前本地进程的uid和pid替代
Binder的restoreCallingIdentity作用是恢复远程调用端的uid和pid信息，正好是`clearCallingIdentity`的反过程

三十一、ConcurrentHashMap
ConcurrentHashMap是一个线程安全的Hash Table，它的主要功能是提供了一组和HashTable功能相同但是线程安全的方法。ConcurrentHashMap可以做到读取数据不加锁，
并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个ConcurrentHashMap加锁

ConcurrentHashMap定位一个元素的过程需要进行两次Hash操作，第一次Hash定位到Segment，第二次Hash定位到元素所在的链表的头部，因此，这一种结构的带来的副作用是Hash的过程要比普通的HashMap要长，
但是带来的好处是写操作的时候可以只对元素所在的Segment进行加锁即可，不会影响到其他的Segment，这样，在最理想的情况下，ConcurrentHashMap可以最高同时支持Segment数量大小的写操作（刚好这些写操作都非常平均地分布在所有的Segment上）

CurrentHashMap的初始化一共有三个参数，一个initialCapacity，表示初始的容量，一个loadFactor，表示负载参数，最后一个是concurrentLevel，代表ConcurrentHashMap内部的Segment的数量，
ConcurrentLevel一经指定，不可改变，后续如果ConcurrentHashMap的元素数量增加导致ConrruentHashMap需要扩容，ConcurrentHashMap不会增加Segment的数量，而只会增加Segment中链表数组的容量大小

ssize就是初始化segment的数量,这里Segment的数量是不大于concurrentLevel的最大的2的指数，就是说Segment的数量永远是2的指数个，这样的好处是方便采用移位操作来进行hash，加快hash的过程。
接下来就是根据intialCapacity确定Segment的容量的大小，每一个Segment的容量大小也是2的指数，同样使为了加快hash的过程
         while (ssize < concurrencyLevel) {
             ++sshift;
             ssize <<= 1;
         }
    segmentShift = 32 - sshift;
    segmentMask = ssize - 1;

hash值就是key的hash值

get操作是不加锁的,通过segments[(hash >>> segmentShift) & segmentMask]获取是在哪个segment中,假设Segment的数量是2的n次方，根据元素的hash值的高n位就可以确定元素到底在哪一个Segment中
count的值是voliate的,这样确保整个读写操作在多线程时是透明的

getFirst获取table的位置,这个table就是这个segment中所有Entry的数量,取hash值的低n位，其中n是HashTable的长度以2为底的结果。

put操作是加锁完成的,while循环是在链表中寻找和要put的元素相同key的元素，如果找到，就直接更新更新key的value，如果没有找到，生成一个新的HashEntry并且把它加到整个Segment的头部，然后再更新count的值

remove操作也是确定需要删除的元素的位置，不过这里删除元素的方法不是简单地把待删除元素的前面的一个元素的next指向后面一个就完事了，我们之前已经说过HashEntry中的next是final的，一经赋值以后就不可修改，
在定位到待删除元素的位置以后，程序就将待删除元素前面的那一些元素全部复制一遍，然后再一个一个重新接到链表上去

size操作:
for (;;) {
    if (retries++ == RETRIES_BEFORE_LOCK) {//retries初始值-1，后者初始值2
        for (int j = 0; j < segments.length; ++j)
            ensureSegment(j).lock(); // force creation
    }
    sum = 0L;
    size = 0;
    overflow = false;
    for (int j = 0; j < segments.length; ++j) {
        Segment<K,V> seg = segmentAt(segments, j);
        if (seg != null) {
            sum += seg.modCount;
            int c = seg.count;
            if (c < 0 || (size += c) < 0)
                overflow = true;
        }
    }
    if (sum == last)
        break;
    last = sum;
}
size操作就是遍历了两次Segment，每次记录Segment的modCount值，然后将两次的modCount进行比较，如果相同，则表示期间没有发生过写入操作，就将原先遍历的结果返回，如果不相同，则把这个过程再重复做一次，
如果再不相同，则就需要将所有的Segment都锁住，然后一个一个遍历了

V定义成volatile，这样保证V在修改后对其他线程立即可见，但volatile不保证修改V操作的原子性，所以在读到V为null时，还需要加锁再读一次readValueUnderLock。
​next定义为final，这样next在初始化后不可修改，在编译时就保证next不会被修改。这样也使得add和remove操作更加复杂，不能像上面HashMap直接修改next。

三十二、HashMap AND fast-fail
HashIterator遍历的时候会将expectedModCount = modCount,然后判断modCount跟expectedModCount是否相等，如果不相等就表示已经有其他线程修改了Map,注意到modCount声明为volatile，保证线程之间修改的可见性
HashMap 在 new 后并不会立即分配bucket数组，而是第一次 put 时初始化，类似 ArrayList 在第一次 add 时分配空间。
HashMap 的 bucket 数组大小一定是2的幂，如果 new 的时候指定了容量且不是2的幂，实际容量会是最接近(大于)指定容量的2的幂，比如 new HashMap<>(19)，比19大且最接近的2的幂是32，实际容量就是32。
HashMap 在 put 的元素数量大于 Capacity * LoadFactor（默认16 * 0.75） 之后会进行扩容。
JDK8在哈希碰撞的链表长度达到TREEIFY_THRESHOLD（默认8)后，会把该链表转变成树结构，提高了性能。
JDK8在 resize 的时候，通过巧妙的设计，减少了 rehash 的性能消耗。


JDK 1.8
HashMap 的bucket数组并不会在new 的时候分配，而是在第一次 put 的时候通过 resize() 函数进行分配
put函数的思路大致分以下几步：

对key的hashCode()进行hash后计算数组下标index;
如果当前数组table为null，进行resize()初始化；
如果没碰撞直接放到对应下标的bucket里；
如果碰撞了，且节点已经存在，就替换掉 value；
如果碰撞后发现为树结构，挂载到树上。
如果碰撞后为链表，添加到链表尾，并判断链表如果过长(大于等于TREEIFY_THRESHOLD，默认8)，就把链表转换成树结构；
数据 put 后，如果数据量超过threshold，就要resize。

三十三、nanotime和currentMillTime
nanotime是jvm虚拟机用来计算间隔时间的方法,返回的是纳秒
currentMillTime计算的是从1972.1.1到现在的时间
